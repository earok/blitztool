//Generated by BlitzTool
using System;
using System.Collections.Generic;

namespace BlitzTool
{
	public interface BlitzType
	{
		void ToByteArray(IList<byte> array, int offset);
		void FromByteArray(IList<byte> array, int offset);
	}

	public struct BlitzByte : BlitzType
	{
		public byte value;

		public void ToByteArray(IList<byte> array, int offset)
		{
			array[offset] = value;
		}

		public void FromByteArray(IList<byte> array, int offset)
		{
			value = array[offset];
		}

		public const int SizeOf = 1;

		public static implicit operator BlitzByte(int d) => new BlitzByte() { value = (byte)d };
		public static implicit operator int(BlitzByte d) => d.value;
		public static implicit operator BlitzByte(bool d) => new BlitzByte() { value = (byte)(d ? -1 : 0) };
		public static implicit operator bool(BlitzByte d) => d.value != 0;

	}

	public struct BlitzWord : BlitzType
	{
		public short value;
		public UInt16 unsignedValue;

		public void FromByteArray(IList<byte> array, int offset)
		{
			value = BitConverter.ToInt16(new byte[] { array[1 + offset], array[0 + offset] }, 0);
			unsignedValue = BitConverter.ToUInt16(new byte[] { array[1 + offset], array[0 + offset] }, 0);
		}

		public void ToByteArray(IList<byte> array, int offset)
		{
			array[0 + offset] = (byte)(value >> 8);
			array[1 + offset] = (byte)(value);
		}

		public const int SizeOf = 2;

		public static implicit operator BlitzWord(int d) => new BlitzWord() { value = (short)d };
		public static implicit operator int(BlitzWord d) => d.value;
		public static implicit operator BlitzWord(bool d) => new BlitzWord() { value = (byte)(d ? -1 : 0) };
		public static implicit operator bool(BlitzWord d) => d.value != 0;

	}

	public struct BlitzLong : BlitzType
	{
		public int value;

		public void FromByteArray(IList<byte> array, int offset)
		{
			value = BitConverter.ToInt32(new byte[] { array[3 + offset], array[2 + offset], array[1 + offset], array[0 + offset] }, 0);
		}

		public void ToByteArray(IList<byte> array, int offset)
		{
			array[0 + offset] = (byte)(value >> 24);
			array[1 + offset] = (byte)(value >> 16);
			array[2 + offset] = (byte)(value >> 8);
			array[3 + offset] = (byte)(value);
		}

		public const int SizeOf = 4;

		public static implicit operator BlitzLong(int d) => new BlitzLong() { value = d };
		public static implicit operator int(BlitzLong d) => d.value;
		public static implicit operator BlitzLong(bool d) => new BlitzLong() { value = (byte)(d ? -1 : 0) };
		public static implicit operator bool(BlitzLong d) => d.value != 0;
	}

	public struct BlitzQuick : BlitzType
	{
		public const float ConversionMultiplier = 65536;

		public float value;

		//Need to verify conversion logic, may be inaccurate
		public void FromByteArray(IList<byte> array, int offset)
		{
			value = BitConverter.ToInt32(new byte[] { array[3 + offset], array[2 + offset], array[1 + offset], array[0 + offset] }, 0) / ConversionMultiplier;
		}

		public void ToByteArray(IList<byte> array, int offset)
		{
			int quickValue = (int)(value * ConversionMultiplier);
			array[0 + offset] = (byte)(quickValue >> 24);
			array[1 + offset] = (byte)(quickValue >> 16);
			array[2 + offset] = (byte)(quickValue >> 8);
			array[3 + offset] = (byte)(quickValue);
		}

		public const int SizeOf = 4;

		public static implicit operator BlitzQuick(float d) => new BlitzQuick() { value = d };
		public static implicit operator float(BlitzQuick d) => d.value;
		public static implicit operator BlitzQuick(bool d) => new BlitzQuick() { value = (byte)(d ? -1 : 0) };
		public static implicit operator bool(BlitzQuick d) => d.value != 0;
	}


	//String not supported, treated as long


	public static class BlitzConstants
	{
		//CONSTANTS
	}

	//NEWTYPES

}
